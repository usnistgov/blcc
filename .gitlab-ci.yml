variables:
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: "MvEWFlPGNaEQ8UgcvBpTqk5b3msqM9Fj"
  POSTGRES_DB: BLCC
  CARGO_HOME: ${CI_PROJECT_DIR}/.cargo

stages:
  - build
  - docker
  - test
  - deploy

backend-build:
  image: clux/muslrust:1.85.0-nightly
  stage: build
  script:
    - cd backend
    - rustup target add "x86_64-unknown-linux-musl"
    - cargo build --release --locked --target "x86_64-unknown-linux-musl"
  cache:
    - key:
        files:
          - backend/Cargo.lock
      paths:
        - .cargo/bin
        - .cargo/registry/index
        - .cargo/registry/cache
        - backend/target
  artifacts:
    paths:
      - backend/target/x86_64-unknown-linux-musl/release/backend

frontend-build:
  image: node:23
  stage: build
  before_script:
    - cd frontend
    - corepack enable pnpm
    - pnpm config set @lrd:registry=$CI_API_V4_URL/projects/$E3_SDK_PROJECT_ID/packages/npm/
    - pnpm config set //gitlab.nist.gov/gitlab/api/v4/projects/$E3_SDK_PROJECT_ID/packages/npm/:_authToken="$E3_SDK_PROJECT_TOKEN"
    - pnpm config list
  script:
    - pnpm install
    - pnpm run build
  cache:
    - key:
        files:
          - frontend/pnpm-lock.yaml
      paths:
        - frontend/node_modules
        - ~/.cache/Cypress
  artifacts:
    paths:
      - frontend/dist/*
      - root/.cache/Cypress/*


# testing:
#   image: cypress/browsers:22.13.1
#   services:
#     - name: docker.nist.gov:4567/eldst/blcc:db
#       alias: postgres
#   stage: test
#   cache:
#     - key:
#         files:
#           - backend/Cargo.lock
#       paths:
#         - backend/target
#     - key:
#         files:
#           - frontend/pnpm-lock.yaml
#       paths:
#         - frontend/node_modules
#         - ~/.cache/Cypress
#   before_script:
#     - cd frontend
#     - npm install -g corepack@latest
#     - corepack enable pnpm
#     - pnpm config set @lrd:registry=$CI_API_V4_URL/projects/$E3_SDK_PROJECT_ID/packages/npm/
#     - pnpm config set //gitlab.nist.gov/gitlab/api/v4/projects/$E3_SDK_PROJECT_ID/packages/npm/:_authToken="$E3_SDK_PROJECT_TOKEN"
#     - pnpm config list
#     - cd ../backend
#     - echo "DATABASE_URL=postgres://admin:MvEWFlPGNaEQ8UgcvBpTqk5b3msqM9Fj@postgres/BLCC" >> .env
#     - echo "ALLOWED_ORIGIN=http://localhost:8080" >> .env
#     - echo "E3_URL=https://e3test.el.nist.gov/api/v2/analysis" >> .env
#     - echo "E3_API_KEY=$E3_API_KEY" >> .env
#   script: 
#     - cd ../backend
#     - apt update && apt install curl libssl-dev build-essential -y
#     - curl https://sh.rustup.rs -sSf | sh -s -- -y
#     - ~/.cargo/bin/cargo build
#     - ~/.cargo/bin/cargo run &
#     - cd ../frontend
#     - pnpm install
#     - pnpm cypress install
#     - pnpm run dev &
#     - pnpm cypress run

docker-db-build:
  image: docker:latest
  services:
    - docker:dind
  stage: docker
  tags: [dind]
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"
#      changes:
#        - "database/docker-entrypoint-initdb.d/dump.pgdata"
#        - 'database/**/*'
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd database
    - docker build -t $CI_REGISTRY_IMAGE/db:latest -t $CI_REGISTRY_IMAGE/db:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/db -a

# Builds 
docker-build:
  image: docker:latest
  services:
    - docker:dind
  stage: docker
  tags: [dind]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_TAG
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/server:latest -t $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA -f gitlab-dockerfile .
    - docker push $CI_REGISTRY_IMAGE/server -a
  needs:
    - job: "frontend-build"
      artifacts: true
    - job: "backend-build"
      artifacts: true


docker-tag:
  image: docker:latest
  services:
    - docker:dind
  stage: docker
  tags: [dind]
  needs: ["docker-build", "docker-db-build"]
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Server
    - docker pull $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/server:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE/server:$CI_COMMIT_TAG
    # DB
    - docker pull $CI_REGISTRY_IMAGE/db:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/db:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/db:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE/db:$CI_COMMIT_TAG


# Deploys a docker-compose file to a portainer instance.
portainer-deploy:
  image: docker:latest
  services:
    - docker:dind
  stage: deploy
  tags: [dind]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
  before_script:
    - export BLCC_SERVER_TAG=$CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA
    - export BLCC_DB_TAG=$CI_REGISTRY_IMAGE/db:$CI_COMMIT_SHA
  # Run the `deploy` command on the portainer docker context with the given compose file and stack name
  script:
    - docker stack deploy --with-registry-auth -c portainer-stack.yml --resolve-image always --prune blcc
